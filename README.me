# UI Driver for TADA2025 Workshop

Example driver for Page Object Pattern for UI via CRUD operations using Selenium WebDriver and Robot Framework.

## Prerequisites

Before using the DemoQADriver, ensure you have the following installed on your system:

### System Requirements
- **Python 3.8+** (tested with Python 3.12.3)
- **Google Chrome** browser (for Selenium WebDriver)
- **Git** (for cloning the repository)

### Required Python Packages

The following packages need to be installed in your virtual environment:

```bash
# Core testing framework
pytest

# Selenium and Robot Framework libraries
selenium
robotframework-seleniumlibrary
chromedriver-autoinstaller

# Additional utilities (automatically installed as dependencies)
robotframework
```

## Installation Guide

### 1. Clone and Navigate to Project
```powershell
git clone https://github.com/ajadach/TADA2025
cd C:\workshop\TADA2025
```

### 2. Create and Activate Virtual Environment
```powershell
# Create virtual environment
python -m venv .venv

# Activate virtual environment (PowerShell)
.\.venv\Scripts\Activate.ps1

# Alternative activation (Command Prompt)
.\.venv\Scripts\activate.bat
```

### 3. Install Required Packages
```powershell
# Install all required packages
pip install pytest robotframework-seleniumlibrary chromedriver-autoinstaller
```

### 4. Verify Installation
```powershell
# Test import of DemoQADriver
python -c "from DemoQADriver import DemoQADriver; print('DemoQADriver imported successfully')"
```

## Project Structure

```
C:\workshop\TADA2025\
├── DemoQADriver/
│   ├── __init__.py           # Package initialization and exports
│   └── demoqa_driver.py      # Main DemoQADriver implementation
├── tests/
│   └── test_open_session.py  # Test suite for DemoQADriver
├── .venv/                    # Virtual environment (created after setup)
└── README.me                 # This file
```

## Usage

### Basic Usage Example

```python
from DemoQADriver import DemoQADriver

# Create driver instance
driver = DemoQADriver()

# Open browser and navigate to DemoQA
session_id = driver.open_browser()
driver.navigate_to_page("https://demoqa.com/")

# Perform your test operations here...

# Clean up
driver.close_browser()
```

### Available Methods

- `open_browser(alias=None, headless=False)` - Opens a Chrome browser
- `navigate_to_page(url='https://demoqa.com/')` - Navigates to specified URL
- `close_browser()` - Closes the browser session

## Running Tests

### Prerequisites for Running Tests
Ensure your virtual environment is activated:
```powershell
.\.venv\Scripts\Activate.ps1
```

### Test Execution Options

#### 1. Run All Tests
```powershell
# Run all tests in the test file with verbose output
pytest tests\test_open_session.py -v
```

#### 2. Run Specific Test Categories

**Integration Tests Only** (requires actual browser):
```powershell
# Run tests that open real browsers
pytest tests\test_open_session.py -k "not mock" -v
```

**Unit Tests Only** (mocked, faster execution):
```powershell
# Run tests with mocked selenium (no browser required)
pytest tests\test_open_session.py -k "mock" -v
```

#### 3. Run Individual Tests
```powershell
# Run a specific test function
pytest tests\test_open_session.py::test_open_browser -v

# Run specific test with detailed output
pytest tests\test_open_session.py::test_navigate_to_page -v -s
```

#### 4. Run All Tests in Tests Directory
```powershell
# Run all test files in the tests folder
pytest tests\ -v
```

### Test Output Explanation

- **Integration Tests**: Will open actual Chrome browser windows
- **Unit Tests**: Use mocked selenium, run faster without opening browsers
- **Test Duration**: Integration tests take ~20-25 seconds, unit tests are nearly instantaneous

### Example Test Run Output
```
============== test session starts ==============
platform win32 -- Python 3.12.3, pytest-8.4.2
collected 10 items

tests/test_open_session.py::test_open_browser PASSED     [ 10%]
tests/test_open_session.py::test_open_browser_with_alias PASSED [ 20%]
tests/test_open_session.py::test_open_browser_headless PASSED   [ 30%]
tests/test_open_session.py::test_navigate_to_page PASSED        [ 40%]
tests/test_open_session.py::test_close_browser PASSED           [ 50%]
tests/test_open_session.py::test_open_browser_mock PASSED       [ 60%]
tests/test_open_session.py::test_open_browser_headless_mock PASSED [ 70%]
tests/test_open_session.py::test_navigate_to_page_mock PASSED   [ 80%]
tests/test_open_session.py::test_navigate_to_page_default_url_mock PASSED [ 90%]
tests/test_open_session.py::test_close_browser_mock PASSED      [100%]

============== 10 passed in 21.84s ==============
```

## Troubleshooting

### Common Issues and Solutions

#### 1. Import Error: "No module named 'DemoQADriver'"
**Solution**: Ensure you're in the correct directory and virtual environment is activated
```powershell
cd C:\workshop\TADA2025
.\.venv\Scripts\Activate.ps1
```

#### 2. Chrome Driver Issues
**Solution**: The `chromedriver-autoinstaller` package automatically handles Chrome driver installation

#### 3. Virtual Environment Not Activating
**Solution**: Use the full path or check PowerShell execution policy
```powershell
# Set execution policy if needed
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser

# Use full path
C:\workshop\TADA2025\.venv\Scripts\Activate.ps1
```

#### 4. Tests Hanging or Slow
**Solution**: Run only unit tests for faster feedback
```powershell
pytest tests\test_open_session.py -k "mock" -v
```

## Development Notes

- The driver uses **Robot Framework's SeleniumLibrary** internally
- **Chrome** is the default browser (configurable)
- Tests include both **integration** (real browser) and **unit** (mocked) test types
- All browser sessions are properly cleaned up after tests

## Workshop Context

This driver demonstrates the **Page Object Pattern** for UI automation and is designed for CRUD operation testing on the DemoQA website (https://demoqa.com/).

For questions or issues, refer to the TADA2025 workshop materials or documentation.